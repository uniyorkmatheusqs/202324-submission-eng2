package main.java.uk.ac.york.eng2.assessment.[%=microserviceName%].cli.[%=controllerName%];

import java.util.List;
import io.micronaut.http.HttpResponse;
import jakarta.inject.Inject;
import picocli.CommandLine.Command;
import picocli.CommandLine.Parameters;
[%if (endpoint.queryParams.size() > 0) {%]
import main.java.uk.ac.york.eng2.assessment.[%=microserviceName%].cli.dtos.*;
[%}%]
[%if (endpoint.queryParams.exists(p| p.type == Types#CustomObject) or endpoint.response != null and endpoint.response.type == Types#CustomObject) {%]
import uk.ac.york.eng2.assessment.[%=microserviceName%].cli.domain.*;
[%}%]

@Command(name="[%=endpoint.name%]-[%=controllerName%]", description="[%=endpoint.name.ftuc()%] [%=controllerName.ftlc()%]", mixinStandardHelpOptions = true)
public class [%=endpoint.name.ftuc()%][%=controllerName.ftuc()%]Command implements Runnable {
    
    @Inject
	private [%=controllerName.ftuc()%]Client client;
    
    [%for (param in endpoint.routeParams.includingAll(endpoint.queryParams).sortBy(p| p.isArray)) {%]
	@Parameters(index="[%=loopCount - 1%]"[%=param.isArray ? ', arity="*"': ''%])
	private [%=param.getJavaType()%] [%=param.name.ftlc()%];

    [%}%]
	@Override
	public void run() {
        [%if (endpoint.queryParams.size() > 0) {%]
		[%=endpoint.name.ftuc()%][%=controllerName.ftuc()%]DTO dto = new [%=endpoint.name.ftuc()%][%=controllerName.ftuc()%]DTO();

            [%for (param in endpoint.queryParams) {%]
		dto.set[%=param.name.ftuc()%]([%=param.name.ftlc()%]);
            [%}%]
    
        [%}%]
        [%var res = getEndpointType(endpoint.response);%]
        [%=res%] response = client.[%=endpoint.name%]([%=getClientParams(endpoint.routeParams, endpoint.queryParams)%]);
		[%if("HttpResponse".isSubstringOf(res)){%]
        System.out.println("Server responded with: " + response.code() + " " + response.getBody());
        [%} else {%]
        System.out.println("Server responded with: " + response.toString());
        [%}%]
	}
}

[%
operation getClientParams(routeParams, queryParams) {
    var params = Bag{};

    if (routeParams.size() > 0) {
        params.addAll(endpoint.routeParams.collect(p| p.name));
    }

    if (queryParams.size() > 0) {
        params.add("dto");
    }

    return params.concat(", ");
}  

operation getEndpointType(property): String {
    if (property == null) {
        return "HttpResponse<String>";
    }

    var javaType = property.getJavaType();
    if (property.type == Types#CustomObject) {
        return javaType;
    }

    return "HttpResponse<" + javaType + ">";
}

operation Property getJavaType(): String {
    var baseType;
    switch (self.type) {
        case Types#CustomLong : baseType = "Long";
        case Types#CustomString : baseType = "String";
        case Types#CustomBoolean : baseType = "Boolean";
        case Types#CustomObject : baseType = self.name.ftuc();
        default: baseType = "Object";
    }

    return self.isArray ? "List<" + baseType + ">" : baseType;
}   
%]
