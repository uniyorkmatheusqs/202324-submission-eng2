package main.java.uk.ac.york.eng2.assessment.[%=microserviceName%].events;

import java.util.List;
import io.micronaut.configuration.kafka.annotation.*;

import uk.ac.york.eng2.assessment.[%=microserviceName%].events.*;

public abstract class I[%=topic.name.toJavaNotation()%]Consumer {
	public static final String TOPIC_[%=topic.name.toJavaNotationConstant()%] = "[%=topic.name%]";

    @Topic(TOPIC_[%=topic.name.toJavaNotationConstant()%])
	public abstract void [%=topic.action.toJavaNotation().ftlc()%]([%=buildTopicParams(topic.event)%]);
}

[%
operation String toJavaNotation() {
    return self.split("-").collect(s | s.ftuc()).concat();
}

operation String toJavaNotationConstant() {
    return self.split("-").collect(s | s.toUpperCase()).concat("_");
}   

operation buildTopicParams(event) {
    var params = Bag{};

    if (event.keys.size() == 1) {
        params.add("@KafkaKey " + event.keys.first().getJavaType() + " " + event.keys.first().name.toJavaNotation().ftlc());
    } else {
        var eventName = event.name.toJavaNotation().ftlc();
        params.add(eventName.ftuc() + "EventKey" + " " + eventName + "EventKey");
    }

    if (event.values.size() == 1) {
        params.add(event.values.first().getJavaType() + " " + event.values.first().name.toJavaNotation().ftlc());
    } else {
        var eventName = event.name.toJavaNotation().ftlc();
        params.add(eventName.ftuc() + "EventImpl" + " " + eventName + "Event");
    }

    return params.concat(", ");
} 

operation Property getJavaType(): String {
    var baseType;
    switch (self.type) {
        case Types#CustomLong : baseType = "Long";
        case Types#CustomString : baseType = "String";
        case Types#CustomBoolean : baseType = "Boolean";
        default: baseType = "Object";
    }

    return self.isArray ? "List<" + baseType + ">" : baseType;
}   
%]