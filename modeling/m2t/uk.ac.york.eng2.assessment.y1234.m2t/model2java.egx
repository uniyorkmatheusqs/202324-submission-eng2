pre {
    var controllerData = Bag{};
    var dtos = Bag{};
    var publishers = Bag{};
    var listeners = Bag{};
    var events = Bag{};
    var endpointsData = Bag{};

    for (m in Microservice) {
        for (c in m.controllers) {
            controllerData.add(new Tuple(name = m.name, controller = c));
        
            var endpoints = c.endpoints.select(e | e.queryParams.notEmpty()); 

            for (e in endpoints) {
                var dto = e.name.ftuc() + c.name.ftuc() + "DTO"; 
                dtos.add(new Tuple(mName = m.name, params = e.queryParams, dto = dto));
            }

            endpointsData.addAll(c.endpoints.collect(e | new Tuple(mName = m.name, controllerName = c.name, endpoint = e)).asBag());
        }

        for (t in m.publish) {
            var publisherData = new Tuple(topic = t, microserviceName = m.name, isKey = false, shouldCreateProperties = true);
            
            publishers.add(publisherData);

            events.add(publisherData);

            if (t.event.keys.size > 1) {
                events.add(new Tuple(topic = t, microserviceName = m.name, isKey = true, shouldCreateProperties = true));    
            }
        }

        for (t in m.listen) {
            var listenerData = new Tuple(topic = t, microserviceName = m.name, isKey = false, shouldCreateProperties = false);
            listeners.add(listenerData);
        
            events.add(listenerData);

            if (t.event.keys.size > 1) {
                events.add(new Tuple(topic = t, microserviceName = m.name, isKey = true, shouldCreateProperties = true));    
            }
        }
    }
}

rule Controller2Java transform m : Tuple in : controllerData {
    template : "templates/java/controller.egl"

    target : "../../../microservices/" + m.name + "-microservice/src-gen/main/java/uk/ac/york/eng2/assessment/" + m.name + "/controllers/I" + m.controller.name.ftuc() + "Controller.java"

    parameters : Map {
        "microserviceName" = m.name,
        "controller" = m.controller
    }
}

rule Dto2Java transform dto : Tuple in : dtos {
    pre {
        var mName = dto.mName;
        var params = dto.params;
        var package = "main.java.uk.ac.york.eng2.assessment." + mName + ".dtos";
    }

    template : "templates/java/dto.egl"

    target : "../../../microservices/" + mName + "-microservice/src-gen/main/java/uk/ac/york/eng2/assessment/" + mName + "/dtos/" + dto.dto.ftuc() + ".java"

    parameters : Map {
        "microserviceName" = mName,
        "dtoName" = dto.dto,
        "params" = params,
        "package" = package
    }
}

rule Publisher2Java transform t : Tuple in : publishers {
    template : "templates/java/producer.egl"
    
    target : "../../../microservices/" + t.microserviceName + "-microservice/src-gen/main/java/uk/ac/york/eng2/assessment/" + t.microserviceName + "/events/" + t.topic.name.toJavaNotation() + "Producer.java"
    
    parameters : Map {
        "microserviceName" = t.microserviceName,
        "topic" = t.topic
    }
}

rule Listener2Java transform t : Tuple in : listeners {
    template : "templates/java/listener.egl"
    
    target : "../../../microservices/" + t.microserviceName + "-microservice/src-gen/main/java/uk/ac/york/eng2/assessment/" + t.microserviceName + "/events/I" + t.topic.name.toJavaNotation() + "Consumer.java"
    
    parameters : Map {
        "microserviceName" = t.microserviceName,
        "topic" = t.topic
    }
}

rule Event2Java transform t : Tuple in : events {
    pre {
        var name = t.isKey ? t.topic.event.name.ftuc() + "EventKey": t.topic.event.name.ftuc() + "Event";
        var params = t.isKey ? t.topic.event.keys : t.topic.event.values;
        
        if (t.shouldCreateProperties == false) {
            params = Bag{};
        }
    }
    
    template : "templates/java/event.egl"
    
    target : "../../../microservices/" + t.microserviceName + "-microservice/src-gen/main/java/uk/ac/york/eng2/assessment/" + t.microserviceName + "/events/" + name + ".java"
    
    parameters : Map {
        "microserviceName" = t.microserviceName,
        "params" = params,
        "name" = name
    }
}

rule DtoCli2Java transform dto : String in : dtos {
    pre {
        var mName = dto.mName;
        var params = dto.params;
        var package = "main.java.uk.ac.york.eng2.assessment." + mName + ".cli.dtos";
    }

    template : "templates/java/dto.egl"

    target : "../../../microservices/client/" + mName + "-cli/src-gen/main/java/uk/ac/york/eng2/assessment/" + mName + "/cli/dtos/" + dto.dto.ftuc() + ".java"

    parameters : Map {
        "microserviceName" = mName,
        "dtoName" = dto.dto,
        "params" = params,
        "package" = package
    }
}

rule Command2Java transform e : Tuple in : endpointsData {
    template : "templates/java/command.egl"

    target : "../../../microservices/client/" + e.mName + "-cli/src-gen/main/java/uk/ac/york/eng2/assessment/" + e.mName + "/cli/" + e.controllerName + "/" + e.endpoint.name.ftuc() + e.controllerName.ftuc() + "Command.java"

    parameters : Map {
        "microserviceName" = e.mName,
        "endpoint" = e.endpoint,
        "controllerName" = e.controllerName
    }
}

rule Client2Java transform m : Tuple in : controllerData {
    template : "templates/java/client.egl"

    target : "../../../microservices/client/" + m.name + "-cli/src-gen/main/java/uk/ac/york/eng2/assessment/" + m.name + "/cli/" + m.controller.name + "/" + m.controller.name.ftuc() + "Client.java"

    parameters : Map {
        "microserviceName" = m.name,
        "controller" = m.controller
    }
}

operation String toJavaNotation(): String {
    return self.split("-").collect(s | s.ftuc()).concat();
}